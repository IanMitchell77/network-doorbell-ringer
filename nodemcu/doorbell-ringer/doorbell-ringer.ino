#include <WiFiServer.h>
#include <WiFiClientSecure.h>
#include <ESP8266WiFiAP.h>
#include <ESP8266WiFiGeneric.h>
#include <ESP8266WiFiScan.h>
#include <ESP8266WiFiType.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <ESP8266WiFiSTA.h>
#include <WiFiClient.h>

#include <ESP8266WebServer.h>
ESP8266WebServer server(80);
/*
 *  This sketch sends a message to a TCP server
 *
 */

// WiFi settings
// jules's house
//const char* ssid = "VM6339503";
//const char* password = "zdhzmcFCy2vr";
//sky 4 desk
//const char* ssid = "SKYFB337";
//const char* password = "XDSUPDAU";
// in the home office
//const char* ssid="mitchsoft";
//const char* password="davethecat";
// in the house
const char* ssid="SKYB2595";
const char* password="XNTRRWRQYB";

const int buzzer = D8; // pin d8 on the nodemcu board

WiFiUDP UDPTestServer;
unsigned int UDPPort = 4950;

const int packetSize = 21;
byte packetBuffer[packetSize];

WiFiUDP UDP;

void setup() {
    Serial.begin(115200);
    pinMode(buzzer, OUTPUT); // Set buzzer - pin 9 as an output
    pinMode(LED_BUILTIN, OUTPUT);
    delay(10);

    tone(buzzer, 200);
    
    // We start by connecting to a WiFi network
    WiFi.begin(ssid, password);

    Serial.println();
    Serial.println();
    Serial.print("Wait for WiFi to connect to ");
    Serial.print(ssid);

    while(WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(50);
    }
    
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    
    UDPTestServer.begin(UDPPort);
    tone(buzzer, 2000);
    delay(500);
    noTone(buzzer);
    Serial.println("Waiting for button press broadcasts");
 
    server.on("/api", loadIndexHTML);

    server.begin();
}

const char data_indexHTML[] PROGMEM = {0x3c,0x21,0x44,0x6f,0x63,0x74,0x79,0x70,0x65,0x20,0x68,0x74,0x6d,0x6c,0x3e,0x0a,0x3c,0x68,0x74,0x6d,0x6c,0x3e,0x0a,0x3c,0x68,0x65,0x61,0x64,0x3e,0x0a,0x3c,0x6d,0x65,0x74,0x61,0x20,0x63,0x68,0x61,0x72,0x73,0x65,0x74,0x3d,0x75,0x74,0x66,0x2d,0x38,0x3e,0x0a,0x3c,0x74,0x69,0x74,0x6c,0x65,0x3e,0x45,0x53,0x50,0x38,0x32,0x36,0x36,0x20,0x44,0x65,0x61,0x75,0x74,0x68,0x65,0x72,0x3c,0x2f,0x74,0x69,0x74,0x6c,0x65,0x3e,0x0a,0x3c,0x6d,0x65,0x74,0x61,0x20,0x6e,0x61,0x6d,0x65,0x3d,0x64,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x20,0x63,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x3d,0x22,0x57,0x69,0x2d,0x46,0x69,0x20,0x44,0x65,0x61,0x75,0x74,0x68,0x65,0x6e,0x74,0x69,0x63,0x61,0x74,0x6f,0x72,0x22,0x3e,0x0a,0x3c,0x6d,0x65,0x74,0x61,0x20,0x6e,0x61,0x6d,0x65,0x3d,0x61,0x75,0x74,0x68,0x6f,0x72,0x20,0x63,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x3d,0x22,0x53,0x70,0x61,0x63,0x65,0x68,0x75,0x68,0x6e,0x20,0x2d,0x20,0x53,0x74,0x65,0x66,0x61,0x6e,0x20,0x4b,0x72,0x65,0x6d,0x73,0x65,0x72,0x22,0x3e,0x0a,0x3c,0x6d,0x65,0x74,0x61,0x20,0x6e,0x61,0x6d,0x65,0x3d,0x76,0x69,0x65,0x77,0x70,0x6f,0x72,0x74,0x20,0x63,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x3d,0x22,0x77,0x69,0x64,0x74,0x68,0x3d,0x64,0x65,0x76,0x69,0x63,0x65,0x2d,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x69,0x6e,0x69,0x74,0x69,0x61,0x6c,0x2d,0x73,0x63,0x61,0x6c,0x65,0x3d,0x31,0x22,0x3e,0x0a,0x3c,0x73,0x63,0x72,0x69,0x70,0x74,0x20,0x73,0x72,0x63,0x3d,0x6a,0x73,0x2f,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x73,0x2e,0x6a,0x73,0x3e,0x3c,0x2f,0x73,0x63,0x72,0x69,0x70,0x74,0x3e,0x0a,0x3c,0x6c,0x69,0x6e,0x6b,0x20,0x72,0x65,0x6c,0x3d,0x73,0x74,0x79,0x6c,0x65,0x73,0x68,0x65,0x65,0x74,0x20,0x68,0x72,0x65,0x66,0x3d,0x73,0x74,0x79,0x6c,0x65,0x2e,0x63,0x73,0x73,0x3e,0x0a,0x3c,0x2f,0x68,0x65,0x61,0x64,0x3e,0x0a,0x3c,0x62,0x6f,0x64,0x79,0x3e,0x0a,0x3c,0x64,0x69,0x76,0x20,0x69,0x64,0x3d,0x65,0x72,0x72,0x6f,0x72,0x3e,0x3c,0x2f,0x64,0x69,0x76,0x3e,0x0a,0x3c,0x64,0x69,0x76,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x63,0x6f,0x6e,0x74,0x61,0x69,0x6e,0x65,0x72,0x3e,0x0a,0x3c,0x64,0x69,0x76,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x72,0x6f,0x77,0x3e,0x0a,0x3c,0x64,0x69,0x76,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x63,0x6f,0x6c,0x2d,0x31,0x32,0x3e,0x0a,0x3c,0x68,0x31,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x68,0x65,0x61,0x64,0x65,0x72,0x3e,0x57,0x41,0x52,0x4e,0x49,0x4e,0x47,0x3c,0x2f,0x68,0x31,0x3e,0x0a,0x3c,0x70,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x22,0x6d,0x69,0x64,0x64,0x6c,0x65,0x20,0x62,0x6f,0x6c,0x64,0x22,0x3e,0x0a,0x54,0x68,0x69,0x73,0x20,0x73,0x6f,0x66,0x74,0x77,0x61,0x72,0x65,0x20,0x69,0x73,0x20,0x6d,0x65,0x61,0x6e,0x74,0x20,0x66,0x6f,0x72,0x20,0x74,0x65,0x73,0x74,0x69,0x6e,0x67,0x20,0x63,0x6f,0x6d,0x6d,0x6f,0x6e,0x20,0x76,0x75,0x6c,0x6e,0x65,0x72,0x61,0x62,0x69,0x6c,0x69,0x74,0x69,0x65,0x73,0x20,0x69,0x6e,0x20,0x74,0x68,0x65,0x20,0x38,0x30,0x32,0x2e,0x31,0x31,0x20,0x73,0x74,0x61,0x6e,0x64,0x61,0x72,0x64,0x20,0x6f,0x6e,0x6c,0x79,0x2e,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x49,0x74,0x20,0x63,0x61,0x6e,0x20,0x64,0x69,0x73,0x72,0x75,0x70,0x74,0x20,0x75,0x6e,0x70,0x72,0x6f,0x74,0x65,0x63,0x74,0x65,0x64,0x20,0x57,0x69,0x2d,0x46,0x69,0x20,0x63,0x6f,0x6e,0x6e,0x65,0x63,0x74,0x69,0x6f,0x6e,0x73,0x2e,0x3c,0x62,0x72,0x2f,0x3e,0x0a,0x50,0x6c,0x65,0x61,0x73,0x65,0x20,0x63,0x68,0x65,0x63,0x6b,0x20,0x74,0x68,0x65,0x20,0x6c,0x61,0x77,0x73,0x20,0x69,0x6e,0x20,0x79,0x6f,0x75,0x72,0x20,0x63,0x6f,0x75,0x6e,0x74,0x72,0x79,0x20,0x62,0x65,0x66,0x6f,0x72,0x65,0x20,0x75,0x73,0x69,0x6e,0x67,0x20,0x69,0x74,0x2e,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x73,0x70,0x61,0x6e,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x77,0x61,0x72,0x6e,0x3e,0x55,0x73,0x65,0x20,0x69,0x74,0x20,0x6f,0x6e,0x6c,0x79,0x20,0x6f,0x6e,0x20,0x79,0x6f,0x75,0x72,0x20,0x6f,0x77,0x6e,0x20,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x73,0x20,0x61,0x6e,0x64,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x73,0x21,0x3c,0x2f,0x73,0x70,0x61,0x6e,0x3e,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x54,0x68,0x65,0x20,0x75,0x73,0x61,0x67,0x65,0x20,0x6f,0x66,0x20,0x74,0x68,0x69,0x73,0x20,0x73,0x6f,0x66,0x74,0x77,0x61,0x72,0x65,0x20,0x61,0x67,0x61,0x69,0x6e,0x73,0x74,0x20,0x6f,0x74,0x68,0x65,0x72,0x20,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x73,0x20,0x77,0x69,0x74,0x68,0x6f,0x75,0x74,0x20,0x70,0x65,0x72,0x6d,0x69,0x73,0x73,0x69,0x6f,0x6e,0x20,0x69,0x73,0x20,0x69,0x6c,0x6c,0x65,0x67,0x61,0x6c,0x21,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x59,0x6f,0x75,0x20,0x61,0x72,0x65,0x20,0x73,0x65,0x6c,0x66,0x20,0x72,0x65,0x73,0x70,0x6f,0x73,0x69,0x62,0x6c,0x65,0x20,0x66,0x6f,0x72,0x20,0x65,0x76,0x65,0x72,0x79,0x74,0x68,0x69,0x6e,0x67,0x20,0x79,0x6f,0x75,0x20,0x64,0x6f,0x20,0x77,0x69,0x74,0x68,0x20,0x74,0x68,0x69,0x73,0x20,0x70,0x72,0x6f,0x67,0x72,0x61,0x6d,0x21,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x49,0x74,0x20,0x77,0x69,0x6c,0x6c,0x20,0x6c,0x6f,0x67,0x20,0x61,0x6c,0x6c,0x20,0x61,0x63,0x74,0x69,0x6f,0x6e,0x73,0x20,0x61,0x67,0x61,0x69,0x6e,0x73,0x74,0x20,0x61,0x6e,0x79,0x20,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x20,0x61,0x6e,0x64,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x2e,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x52,0x65,0x66,0x65,0x72,0x72,0x69,0x6e,0x67,0x20,0x74,0x6f,0x20,0x74,0x68,0x69,0x73,0x20,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x20,0x61,0x73,0x20,0x22,0x6a,0x61,0x6d,0x6d,0x65,0x72,0x22,0x20,0x69,0x73,0x20,0x70,0x72,0x6f,0x68,0x69,0x62,0x69,0x74,0x65,0x64,0x21,0x20,0x4e,0x61,0x6d,0x65,0x20,0x74,0x68,0x65,0x20,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x20,0x62,0x79,0x20,0x69,0x74,0x73,0x20,0x63,0x6f,0x72,0x72,0x65,0x63,0x74,0x20,0x6e,0x61,0x6d,0x65,0x2e,0x0a,0x55,0x6e,0x61,0x75,0x74,0x68,0x6f,0x72,0x69,0x7a,0x65,0x64,0x20,0x73,0x65,0x6c,0x6c,0x69,0x6e,0x67,0x20,0x6f,0x66,0x20,0x74,0x68,0x69,0x73,0x20,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x20,0x69,0x6e,0x20,0x61,0x6e,0x79,0x20,0x77,0x61,0x79,0x20,0x69,0x73,0x20,0x6e,0x6f,0x74,0x20,0x61,0x6c,0x6c,0x6f,0x77,0x65,0x64,0x20,0x28,0x73,0x65,0x65,0x20,0x3c,0x61,0x20,0x68,0x72,0x65,0x66,0x3d,0x6c,0x69,0x63,0x65,0x6e,0x73,0x65,0x3e,0x6c,0x69,0x63,0x65,0x6e,0x73,0x65,0x3c,0x2f,0x61,0x3e,0x29,0x2e,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x47,0x6f,0x20,0x74,0x6f,0x20,0x3c,0x61,0x20,0x68,0x72,0x65,0x66,0x3d,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x67,0x69,0x74,0x68,0x75,0x62,0x2e,0x63,0x6f,0x6d,0x2f,0x73,0x70,0x61,0x63,0x65,0x68,0x75,0x68,0x6e,0x2f,0x65,0x73,0x70,0x38,0x32,0x36,0x36,0x5f,0x64,0x65,0x61,0x75,0x74,0x68,0x65,0x72,0x3e,0x67,0x69,0x74,0x68,0x75,0x62,0x2e,0x63,0x6f,0x6d,0x2f,0x73,0x70,0x61,0x63,0x65,0x68,0x75,0x68,0x6e,0x2f,0x65,0x73,0x70,0x38,0x32,0x36,0x36,0x5f,0x64,0x65,0x61,0x75,0x74,0x68,0x65,0x72,0x3c,0x2f,0x61,0x3e,0x20,0x66,0x6f,0x72,0x20,0x6d,0x6f,0x72,0x65,0x20,0x69,0x6e,0x66,0x6f,0x72,0x6d,0x61,0x74,0x69,0x6f,0x6e,0x2e,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x62,0x72,0x20,0x2f,0x3e,0x0a,0x3c,0x61,0x20,0x63,0x6c,0x61,0x73,0x73,0x3d,0x62,0x75,0x74,0x74,0x6f,0x6e,0x20,0x68,0x72,0x65,0x66,0x3d,0x61,0x70,0x73,0x63,0x61,0x6e,0x2e,0x68,0x74,0x6d,0x6c,0x3e,0x49,0x27,0x76,0x65,0x20,0x72,0x65,0x61,0x64,0x20,0x61,0x6e,0x64,0x20,0x75,0x6e,0x64,0x65,0x72,0x73,0x74,0x6f,0x6f,0x64,0x20,0x74,0x68,0x65,0x20,0x6e,0x6f,0x74,0x69,0x63,0x65,0x20,0x61,0x62,0x6f,0x76,0x65,0x3c,0x2f,0x61,0x3e,0x0a,0x3c,0x2f,0x70,0x3e,0x0a,0x3c,0x2f,0x64,0x69,0x76,0x3e,0x0a,0x3c,0x2f,0x64,0x69,0x76,0x3e,0x0a,0x3c,0x2f,0x64,0x69,0x76,0x3e,0x0a,0x3c,0x2f,0x62,0x6f,0x64,0x79,0x3e,0x0a,0x3c,0x2f,0x68,0x74,0x6d,0x6c,0x3e};

#define bufSize 6000
int bufc = 0; //buffer counter;

char data_websiteBuffer[bufSize];

void sendBuffer() {
  if(bufc > 0) {
    server.sendContent_P(data_websiteBuffer, bufc);
    bufc = 0;
  }
}

void sendToBuffer(String str) {
  size_t len = str.length();
  if(bufc + len > bufSize){
    server.sendContent_P(data_websiteBuffer, bufc);
    bufc = 0;
  }
  memcpy(data_websiteBuffer + bufc, str.c_str(), len);
  bufc += len;
}

void sendHeader(int code, String type, size_t _size) {
  server.setContentLength(_size);
  server.send(code, type, "");
}

void sendFile(int code, String type, const char* adr, size_t len) {
  sendHeader(code,type,len);
  /*
  int runs = len/bufSize;
  if(len%bufSize > 0) runs++;
  for (int i = 0; i < runs; i++){
    int _len = bufSize;
    for(int h=0;h<bufSize;h++){
      if(h+i*bufSize >= len){
        _len = h;
        break;
      }
      else data_websiteBuffer[h] = (char)pgm_read_byte_near(adr + h+i*bufSize);
    }
  }*/
  server.sendContent_P(adr,len);
  sendBuffer();
}

void loadIndexHTML() {
  String ring=server.arg("ring");
  if (ring == "true") // eg http://192.168.0.72/api?ring=true
  {
    playTone();
    Serial.println("ringed");
  }
  else if (ring == "false") Serial.println("not ringed");
  else Serial.println("nothing");
  sendFile(200, "text/html", data_indexHTML, sizeof(data_indexHTML));
}

void loop()
{ 
  handleUDPServer();
  server.handleClient();
}

void playTone(void){
  tone(buzzer, 2000); // Send 1KHz sound signal...
  digitalWrite(LED_BUILTIN, LOW);
  delay(500);        // ...for 1 sec
  tone(buzzer, 1000); // Send 1KHz sound signal...
  delay(1000);
  noTone(buzzer);     // Stop sound...
  digitalWrite(LED_BUILTIN, HIGH);
}

void handleUDPServer() {
  int cb = UDPTestServer.parsePacket();
  if (cb) {
    UDPTestServer.read(packetBuffer, packetSize);
    String myData = ""; 
    for(int i = 0; i < packetSize; i++) {
      myData += (char)packetBuffer[i];
    }
    Serial.println(myData);
    char *pbuf = (char *)packetBuffer;
    //sprintf(pbuf, "%s", myData);
    if(strcmp(pbuf, "doorbell-button-press") == 0)
    {
      Serial.println("ring!");
      playTone();
    }
  }
}
